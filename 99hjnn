public void StartQueueMonitor()
{
    Task.Run(async () =>
    {
        while (true)
        {
            await Task.Delay(5000);
            
            lock (_syncLock)
            {
                var dbCount = await _dbService.GetPendingCountAsync(_currentTaskId);
                var memCount = _downloadQueue.Count;
                
                if (Math.Abs(dbCount - memCount) > 100)
                {
                    GlobalData.log.Warn($"队列不同步！数据库：{dbCount}，内存：{memCount}");
                    await ReconcileQueuesAsync();
                }
            }
        }public void StartQueueMonitor()
{
    Task.Run(async () =>
    {
        while (true)
        {
            await Task.Delay(5000);
            
            lock (_syncLock)
            {
                var dbCount = await _dbService.GetPendingCountAsync(_currentTaskId);public void StartQueueMonitor()
{
    Task.Run(async () =>
    {
        while (true)
        {
            await Task.Delay(5000);
            
            lock (_syncLock)
            {public void StartQueueMonitor()
{
    Task.Run(async () =>
    {
        while (true)
        {
            await Task.Delay(5000);
            
            lock (_syncLock)
            {public void StartQueueMonitor()
{
    Task.Run(async () =>
    {
        while (true)
        {
            await Task.Delay(5000);
            public void StartQueueMonitor()
{
    Task.Run(async () =>
    {
        while (true)
        {
            await Task.Delay(5000);
            
            lock (_syncLock)
            {
                var dbCount = await _dbService.GetPendingCountAsync(_currentTaskId);
                var memCount = _downloadQueue.Count;
                
                if (Math.Abs(dbCount - memCount) > 100)
                {
                    GlobalData.log.Warn($"队列不同步！数据库：{dbCount}，内存：{memCount}");
                    await ReconcileQueuesAsync();
                }
            }
        }
    });
}

private async Task ReconcileQueuesAsync()
{
    lock (_syncLock)
    {
        _downloadQueue.Clear();
        var dbItems = await _dbService.GetAllItemsAsync(_currentTaskId);
        foreach (var item in dbItems)
        {
            _downloadQueue.Enqueue(item.ToDownloadFileItem());
        }
    }
}
            lock (_syncLock)
            {
                var dbCount = await _dbService.GetPendingCountAsync(_currentTaskId);
                var memCount = _downloadQueue.Count;
                
                if (Math.Abs(dbCount - memCount) > 100)
                {
                    GlobalData.log.Warn($"队列不同步！数据库：{dbCount}，内存：{memCount}");
                    await ReconcileQueuesAsync();
                }
            }
        }
    });
}

private async Task ReconcileQueuesAsync()
{
    lock (_syncLock)
    {
        _downloadQueue.Clear();
        var dbItems = await _dbService.GetAllItemsAsync(_currentTaskId);
        foreach (var item in dbItems)
        {
            _downloadQueue.Enqueue(item.ToDownloadFileItem());
        }
    }
}
                var dbCount = await _dbService.GetPendingCountAsync(_currentTaskId);
                var memCount = _downloadQueue.Count;
                
                if (Math.Abs(dbCount - memCount) > 100)
                {
                    GlobalData.log.Warn($"队列不同步！数据库：{dbCount}，内存：{memCount}");
                    await ReconcileQueuesAsync();
                }
            }
        }
    });
}

private async Task ReconcileQueuesAsync()
{
    lock (_syncLock)
    {
        _downloadQueue.Clear();
        var dbItems = await _dbService.GetAllItemsAsync(_currentTaskId);
        foreach (var item in dbItems)
        {
            _downloadQueue.Enqueue(item.ToDownloadFileItem());
        }
    }
}
                var dbCount = await _dbService.GetPendingCountAsync(_currentTaskId);
                var memCount = _downloadQueue.Count;
                
                if (Math.Abs(dbCount - memCount) > 100)
                {
                    GlobalData.log.Warn($"队列不同步！数据库：{dbCount}，内存：{memCount}");
                    await ReconcileQueuesAsync();
                }
            }
        }
    });
}

private async Task ReconcileQueuesAsync()
{
    lock (_syncLock)
    {
        _downloadQueue.Clear();
        var dbItems = await _dbService.GetAllItemsAsync(_currentTaskId);
        foreach (var item in dbItems)public void StartQueueMonitor()
{
    Task.Run(async () =>
    {
        while (true)
        {
            await Task.Delay(5000);
            
            lock (_syncLock)
            {
                var dbCount = await _dbService.GetPendingCountAsync(_currentTaskId);
                var memCount = _downloadQueue.Count;
                
                if (Math.Abs(dbCount - memCount) > 100)
                {
                    GlobalData.log.Warn($"队列不同步！数据库：{dbCount}，内存：{memCount}");
                    await ReconcileQueuesAsync();
                }
            }
        }
    });
}

private async Task ReconcileQueuesAsync()
{
    lock (_syncLock)
    {
        _downloadQueue.Clear();
        var dbItems = await _dbService.GetAllItemsAsync(_currentTaskId);
        foreach (var item in dbItems)
        {
            _downloadQueue.Enqueue(item.ToDownloadFileItem());
        }
    }
}
        {
            _downloadQueue.Enqueue(item.ToDownloadFileItem());
        }
    }
}
                var memCount = _downloadQueue.Count;
                
                if (Math.Abs(dbCount - memCount) > 100)
                {
                    GlobalData.log.Warn($"队列不同步！数据库：{dbCount}，内存：{memCount}");
                    await ReconcileQueuesAsync();
                }
            }
        }
    });
}

private async Task ReconcileQueuesAsync()
{
    lock (_syncLock)
    {
        _downloadQueue.Clear();
        var dbItems = await _dbService.GetAllItemsAsync(_currentTaskId);
        foreach (var item in dbItems)
        {
            _downloadQueue.Enqueue(item.ToDownloadFileItem());
        }
    }
}
    });
}

private async Task ReconcileQueuesAsync()
{
    lock (_syncLock)
    {
        _downloadQueue.Clear();
        var dbItems = await _dbService.GetAllItemsAsync(_currentTaskId);
        foreach (var item in dbItems)
        {
            _downloadQueue.Enqueue(item.ToDownloadFileItem());
        }
    }
}
